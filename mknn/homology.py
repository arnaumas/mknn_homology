from . import clique
from .clique import Chain

class HomologyClass():
    def __init__(self, dimension, generator, representatives, birth = 0):
        self.dimension = dimension
        self.birth = birth
        self.death = -1
        self.generator = generator
        self.representatives = set(representatives)
        self.lifetime = []
        self.id = representatives[0].points[0]

    @property
    def is_dead(self):
        if self.death == -1:
            return False
        else:
            return True

    @property
    def is_alive(self):
        return not self.is_dead

    @property
    def is_zero(self):
        return not self.generator.cliques

    @property
    def size(self):
        return len(self.representatives)

    @staticmethod
    def empty(d):
        return HomologyClass(d, [], [])

    def kill(self, k):
        self.death = k 

    def __add__(self, other):
        if self.dimension != other.dimension:
            raise ValueError("Homology classes must be of the same dimension to be added")
        return HomologyClass(self.dimension, self.generator +
                other.generator, self.representatives | other.representatives)

    def __repr__(self):
        return "H[" + repr(self.generator) + "]"

    def __str__(self):
        return (f"{self.dimension}-dimensional homology class generated by the chain: " 
            + repr(self.generator))
